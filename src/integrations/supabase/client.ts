// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';
import { cacheService } from '@/services/cacheService';

const supabaseUrl = import.meta.env.VITE_SUPABASE_URL;
const supabaseAnonKey = import.meta.env.VITE_SUPABASE_ANON_KEY;

// Fallback to hardcoded values if environment variables are not available
const SUPABASE_URL = supabaseUrl || "https://juamkehykcohwufehqfv.supabase.co";
const SUPABASE_ANON_KEY = supabaseAnonKey || "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Imp1YW1rZWh5a2NvaHd1ZmVocWZ2Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDY3NTY2OTIsImV4cCI6MjA2MjMzMjY5Mn0.jQk-SoPxy9I-r6oWFRtv9dQVvNBRNVUiuYTscN_Pu0k";

// Log a warning if using fallback values
if (!supabaseUrl || !supabaseAnonKey) {
  console.warn('Using fallback Supabase credentials. Please set up environment variables for production use.');
}

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_ANON_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: true,
    storage: window.localStorage,
    storageKey: 'supabase.auth.token'
  }
});

// Cache wrapper for Supabase queries
export const cachedQuery = async <T>(
  key: string,
  queryFn: () => Promise<T>,
  expiresIn?: number
): Promise<T> => {
  // Check cache first
  const cachedData = cacheService.get<T>(key);
  if (cachedData) {
    return cachedData;
  }

  // If not in cache, execute query
  const data = await queryFn();
  
  // Store in cache
  cacheService.set(key, data, expiresIn);
  
  return data;
};

// Optimized data fetching with pagination
export const fetchPaginatedData = async <T>(
  key: string,
  queryFn: (page: number, limit: number) => Promise<T[]>,
  page: number = 1,
  limit: number = 20
): Promise<T[]> => {
  const cacheKey = `${key}_page_${page}_limit_${limit}`;
  
  // Check cache first
  const cachedData = cacheService.get<T[]>(cacheKey);
  if (cachedData) {
    return cachedData;
  }

  // If not in cache, execute query
  const data = await queryFn(page, limit);
  
  // Store in cache
  cacheService.set(cacheKey, data);
  
  return data;
};

// Optimized real-time subscription with debounce
export const createOptimizedSubscription = <T>(
  channel: string,
  callback: (payload: T) => void,
  debounceMs: number = 1000
) => {
  let timeout: NodeJS.Timeout;
  
  return supabase
    .channel(channel)
    .on('broadcast', { event: '*' }, (payload) => {
      clearTimeout(timeout);
      timeout = setTimeout(() => {
        callback(payload as T);
      }, debounceMs);
    })
    .subscribe();
};

// Clear cache on auth state change
supabase.auth.onAuthStateChange((event) => {
  if (event === 'SIGNED_OUT') {
    cacheService.clear();
  }
});